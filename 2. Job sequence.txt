#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Job {
public:
    char id;
    int deadline;
    int profit;

    Job(char id, int deadline, int profit) {
        this->id = id;
        this->deadline = deadline;
        this->profit = profit;
    }
};

bool compareProfit(Job a, Job b) {
    return a.profit > b.profit;
}

void printJobSequence(vector<Job>& jobs) {
    // Sort jobs in descending order of profit
    sort(jobs.begin(), jobs.end(), compareProfit);

    int maxDeadline = 0;
    for (const auto& job : jobs) {
        if (job.deadline > maxDeadline) {
            maxDeadline = job.deadline;
        }
    }

    vector<char> result(maxDeadline, 'X');
    vector<bool> slot(maxDeadline, false);

    for (const auto& job : jobs) {
        for (int j = min(maxDeadline - 1, job.deadline - 1); j >= 0; j--) {
            if (!slot[j]) {
                result[j] = job.id;
                slot[j] = true;
                break;
            }
        }
    }

    cout << "Job Sequence: ";
    for (const char& jobId : result) {
        if (jobId != 'X') {
            cout << jobId << " ";
        }
    }
    cout << endl;

    int totalProfit = 0;
    for (int i = 0; i < maxDeadline; i++) {
        if (slot[i]) {
            for (const auto& job : jobs) {
                if (job.id == result[i]) {
                    totalProfit += job.profit;
                    break;
                }
            }
        }
    }

    cout << "Total Profit: " << totalProfit << endl;
}

int main() {
    int n;
    cout << "Enter number of jobs: ";
    cin >> n;

    vector<Job> jobs;
    cout << "Enter jobs in the format (id deadline profit):" << endl;

    for (int i = 0; i < n; i++) {
        char id;
        int deadline, profit;
        cin >> id >> deadline >> profit;
        jobs.push_back(Job(id, deadline, profit));
    }

    printJobSequence(jobs);
    return 0;
}
